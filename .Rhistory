height = 300
),
#
box(
title = "Predicted diagnosis",
status = "primary",
textOutput("text1"),
height = 300
)
),
fluidRow(
box(
title = "Healthy",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "AML",
status = "primary",
plotOutput("plot3", height = 240),
height = 300
)
),
fluidRow(
box(
title = "Histogram control", width = 4, solidHeader = TRUE, status = "primary",
sliderInput("count", "Count", min = 1, max = 500, value = 120)
),
box(
title = "Appearance",
width = 4, solidHeader = TRUE,
radioButtons("fill", "Fill", # inline = TRUE,
c(None = "none", Blue = "blue", Black = "black", red = "red")
)
),
box(
title = "Scatterplot control",
width = 4, solidHeader = TRUE, status = "warning",
selectInput("spread", "Spread",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80, "100%" = 100),
selected = "60"
)
)
)
# Boxes with solid headers
# Solid backgrounds
)
)
)
header <- dashboardHeader(
title = "AML classifier"
#   messages,
#   notifications,
#   tasks
)
ui <- dashboardPage(header, sidebar, body, skin = skin)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
if (is.null(input$count) || is.null(input$fill))
return()
data <- histdata[seq(1, input$count)]
color <- input$fill
if (color == "none")
color <- NULL
hist(data, col = color, main = NULL)
})
output$scatter1 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "blue")
})
output$scatter2 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "red")
})
}
shinyApp(ui, server)
library(shinydashboard)
library(shiny)
skin <- Sys.getenv("DASHBOARD_SKIN")
skin <- tolower(skin)
if (skin == "")
skin <- "blue"
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("About", icon = icon("th"), tabName = "Widgets"),
menuItem("Test setup", icon = icon("th"), tabName = "Widgets"),
menuItem("Tesing samples", icon = icon("bar-chart-o"),
menuSubItem("Healthy sample", tabName = "subitem1"),
menuSubItem("AML sample", tabName = "subitem2")
),
menuItem("Upload FCS File", tabName = "uploadData", icon = icon("table"),
h6("Upload FCS File"),fileInput("file", label = h3("Upload FCS file"))),
menuItem("Source code for app", icon = icon("file-code-o"),
href = "https://github.com/zhuangyh"
)
)
)
body <- dashboardBody(
tabItems(
tabItem("dashboard",
fluidRow(
box(
title = "Density of CD16: testing sample",
status = "primary",
conditionalPanel(
condition = "exists("plot11")",
plotOutput("plot1", height = 240)),
height = 300
),
box(
title = "Density of CD16 in testing sample",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "Predicted diagnosis",
status = "primary",
textOutput("text1"),
height = 300
)
),
fluidRow(
box(
title = "Healthy",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "AML",
status = "primary",
plotOutput("plot3", height = 240),
height = 300
)
),
fluidRow(
box(
title = "Histogram control", width = 4, solidHeader = TRUE, status = "primary",
sliderInput("count", "Count", min = 1, max = 500, value = 120)
),
box(
title = "Appearance",
width = 4, solidHeader = TRUE,
radioButtons("fill", "Fill", # inline = TRUE,
c(None = "none", Blue = "blue", Black = "black", red = "red")
)
),
box(
title = "Scatterplot control",
width = 4, solidHeader = TRUE, status = "warning",
selectInput("spread", "Spread",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80, "100%" = 100),
selected = "60"
)
)
)
# Boxes with solid headers
# Solid backgrounds
)
)
)
header <- dashboardHeader(
title = "AML classifier"
#   messages,
#   notifications,
#   tasks
)
ui <- dashboardPage(header, sidebar, body, skin = skin)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
if (is.null(input$count) || is.null(input$fill))
return()
data <- histdata[seq(1, input$count)]
color <- input$fill
if (color == "none")
color <- NULL
hist(data, col = color, main = NULL)
})
output$scatter1 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "blue")
})
output$scatter2 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "red")
})
}
shinyApp(ui, server)
library(shinydashboard)
library(shiny)
skin <- Sys.getenv("DASHBOARD_SKIN")
skin <- tolower(skin)
if (skin == "")
skin <- "blue"
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("About", icon = icon("th"), tabName = "Widgets"),
menuItem("Test setup", icon = icon("th"), tabName = "Widgets"),
menuItem("Tesing samples", icon = icon("bar-chart-o"),
menuSubItem("Healthy sample", tabName = "subitem1"),
menuSubItem("AML sample", tabName = "subitem2")
),
menuItem("Upload FCS File", tabName = "uploadData", icon = icon("table"),
h6("Upload FCS File"),fileInput("file", label = h3("Upload FCS file"))),
menuItem("Source code for app", icon = icon("file-code-o"),
href = "https://github.com/zhuangyh"
)
)
)
body <- dashboardBody(
tabItems(
tabItem("dashboard",
fluidRow(
box(
title = "Density of CD16 in testing sample",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "Predicted diagnosis",
status = "primary",
textOutput("text1"),
height = 300
)
),
fluidRow(
box(
title = "Healthy",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "AML",
status = "primary",
plotOutput("plot3", height = 240),
height = 300
)
),
fluidRow(
box(
title = "Histogram control", width = 4, solidHeader = TRUE, status = "primary",
sliderInput("count", "Count", min = 1, max = 500, value = 120)
),
box(
title = "Appearance",
width = 4, solidHeader = TRUE,
radioButtons("fill", "Fill", # inline = TRUE,
c(None = "none", Blue = "blue", Black = "black", red = "red")
)
),
box(
title = "Scatterplot control",
width = 4, solidHeader = TRUE, status = "warning",
selectInput("spread", "Spread",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80, "100%" = 100),
selected = "60"
)
)
)
# Boxes with solid headers
# Solid backgrounds
)
)
)
header <- dashboardHeader(
title = "AML classifier"
#   messages,
#   notifications,
#   tasks
)
ui <- dashboardPage(header, sidebar, body, skin = skin)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
if (is.null(input$count) || is.null(input$fill))
return()
data <- histdata[seq(1, input$count)]
color <- input$fill
if (color == "none")
color <- NULL
hist(data, col = color, main = NULL)
})
output$scatter1 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "blue")
})
output$scatter2 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "red")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
),
dashboardBody(
tabItems(
tabItem("dashboard", "Dashboard tab content"),
tabItem("widgets", "Widgets tab content"),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
)
server <- function(input, output, session) {
output$res <- renderText({
paste("You've selected:", input$tabs)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
),
dashboardBody(
tabItems(
tabItem("dashboard", "Dashboard tab content"),
tabItem("widgets", "Widgets tab content"),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
)
server <- function(input, output, session) {
output$res <- renderText({
paste("You've selected:", input$tabs)
})
}
shinyApp(ui, server)
library(shinydashboard)
library(shiny)
skin <- Sys.getenv("DASHBOARD_SKIN")
skin <- tolower(skin)
if (skin == "")
skin <- "blue"
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("About", icon = icon("th"), tabName = "Widgets"),
menuItem("Test setup", icon = icon("th"), tabName = "Widgets"),
menuItem("Tesing samples", icon = icon("bar-chart-o"),
menuSubItem("Healthy sample", tabName = "subitem1"),
menuSubItem("AML sample", tabName = "subitem2")
),
menuItem("Upload FCS File", tabName = "uploadData", icon = icon("table"),
h6("Upload FCS File"),fileInput("file", label = h3("Upload FCS file"))),
menuItem("Source code for app", icon = icon("file-code-o"),
href = "https://github.com/zhuangyh"
)
)
)
body <- dashboardBody(
tabItems(
tabItem("dashboard",
fluidRow(
box(
title = "Density of CD16 in testing sample",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "Predicted diagnosis",
status = "primary",
textOutput("text1"),
height = 300
)
),
fluidRow(
box(
title = "Healthy",
status = "primary",
plotOutput("plot1", height = 240),
height = 300
),
#
box(
title = "AML",
status = "primary",
plotOutput("plot3", height = 240),
height = 300
)
),
fluidRow(
box(
title = "Histogram control", width = 4, solidHeader = TRUE, status = "primary",
sliderInput("count", "Count", min = 1, max = 500, value = 120)
),
box(
title = "Appearance",
width = 4, solidHeader = TRUE,
radioButtons("fill", "Fill", # inline = TRUE,
c(None = "none", Blue = "blue", Black = "black", red = "red")
)
),
box(
title = "Scatterplot control",
width = 4, solidHeader = TRUE, status = "warning",
selectInput("spread", "Spread",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80, "100%" = 100),
selected = "60"
)
)
)
# Boxes with solid headers
# Solid backgrounds
)
)
)
header <- dashboardHeader(
title = "AML classifier"
#   messages,
#   notifications,
#   tasks
)
ui <- dashboardPage(header, sidebar, body, skin = skin)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
if (is.null(input$count) || is.null(input$fill))
return()
data <- histdata[seq(1, input$count)]
color <- input$fill
if (color == "none")
color <- NULL
hist(data, col = color, main = NULL)
})
output$scatter1 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "blue")
})
output$scatter2 <- renderPlot({
spread <- as.numeric(input$spread) / 100
x <- rnorm(1000)
y <- x + rnorm(1000) * spread
plot(x, y, pch = ".", col = "red")
})
}
shinyApp(ui, server)
setwd("~/Downloads/FlowCAP-II/Data/AML/AML-App/AML-dashboard")
library(shiny)
library(rsconnect)
#runApp("AML-dashboard")
rsconnect::setAccountInfo(name='zhuangy',
token='7837199EB1A176C065B89EC08BDCE029',
secret='rtGK3V5CWtdfZTl3xpWlFm/oHAYT0j8veH5DC7jI')
rsconnect::deployApp('~/Downloads/FlowCAP-II/Data/AML/AML-App/AML-dashboard')
runApp("AML-dashboard")
library(shiny)
library(rsconnect)
runApp("AML-dashboard")
library(shiny)
library(rsconnect)
